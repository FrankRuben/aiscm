(define-module (aiscm bool)
  #:use-module (oop goops)
  #:use-module (rnrs bytevectors)
  #:use-module (aiscm util)
  #:use-module (aiscm element)
  #:use-module (aiscm int)
  #:export (<bool>
            <meta<bool>>))
(define-class* <bool> (<element>) <meta<bool>> (<meta<element>>))
(define-method (size-of (self <meta<bool>>)) 1)
(define-method (pack (self <bool>))
  (u8-list->bytevector (list (if (get-value self) 1 0))))
(define-method (unpack (self <meta<bool>>) (packed <bytevector>))
  (make <bool> #:value (if (eq? (car (bytevector->u8-list packed)) 0) #f #t)))
(define-method (coerce (a <meta<bool>>) (b <meta<bool>>)) <bool>)
(define-method (write (self <bool>) port)
  (format port "#<<bool> ~a>" (get-value self)))
(define-method (match (b <boolean>) . args) <bool>)
(define-method (types (self <meta<bool>>)) (list <ubyte>))
(define-method (content (self <boolean>)) (list (if self 1 0)))
