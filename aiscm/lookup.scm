(define-module (aiscm lookup)
  #:use-module (oop goops)
  #:use-module (aiscm element)
  #:use-module (aiscm pointer)
  #:use-module (aiscm var)
  #:export (<lookup>
            get-var
            get-stride))
(define-class <lookup> (<element>)
  (var #:init-keyword #:var #:getter get-var)
  (stride #:init-keyword #:stride #:getter get-stride))
(define-method (equal? (a <lookup>) (b <lookup>))
  (and
    (next-method)
    (equal? (get-var a) (get-var b))
    (equal? (get-stride a) (get-stride b))))
(define-method (lookup (self <pointer<>>) (var <var>) (stride <integer>))
  (make <lookup> #:value self #:var var #:stride stride))
(define-method (subst (self <lookup>) alist)
  (lookup (get-value self) (subst (get-var self) alist) (get-stride self)))
(define-method (shift (self <lookup>) (var <var>) (amount <integer>))
  (let [(value (if (equal? var (get-var self))
                 (lookup (get-value self) amount (get-stride self))
                 (shift (get-value self) var amount)))]
  (lookup value (get-var self) (get-stride self))))
(define-method (typecode (self <lookup>))
  (typecode (get-value self)))
