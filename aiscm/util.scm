(define-module (aiscm util)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-26)
  #:export (toplevel-define! attach index all-but-last upto depth
            flatten-n flatten cycle uncycle)
  #:export-syntax (def-once expand))
(define (toplevel-define! name val)
  (module-define! (current-module) name val))
(define-syntax-rule (def-once name value)
  (let [(sym (string->symbol name))]
    (if (not (defined? sym (current-module)))
      (toplevel-define! sym value))
    (primitive-eval sym)))
(define (attach lst x) (reverse (cons x (reverse lst))))
(define (index a b)
  (let [(tail (member a (reverse b)))]
    (if tail (length (cdr tail)) #f)))
(define (all-but-last lst) (reverse (cdr (reverse lst))))
(define (upto a b) (if (<= a b) (cons a (upto (1+ a) b)) '()))
(define-syntax-rule (expand n expr) (map (lambda (tmp) expr) (upto 1 n)))
(define (depth val)
  (if (list? val) (1+ (apply max (map depth val))) 0))
(define (flatten-n val n)
  (if (> (depth val) n)
    (if (> (depth (car val)) (- n 1))
      (flatten-n (append (car val) (cdr val)) n)
      (cons (car val) (flatten-n (cdr val) n)))
    val))
(define (flatten val) (flatten-n val 1))
(define (cycle lst) (attach (cdr lst) (car lst)))
(define (uncycle lst) (cons (last lst) (all-but-last lst)))
