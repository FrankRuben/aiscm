(define-module (aiscm magick)
  #:use-module (oop goops)
  #:use-module (aiscm mem)
  #:use-module (aiscm element)
  #:use-module (aiscm pointer)
  #:use-module (aiscm rgb)
  #:use-module (aiscm int)
  #:use-module (aiscm sequence)
  #:export (read-image write-image))
(load-extension "libguile-magick" "init_magick")
(define (read-image file-name)
  (let* [(picture  (magick-read-image file-name))
         (typecode (if (eq? (car picture) 'I) <ubyte> <ubytergb>))]
    (make (multiarray typecode 2)
          #:shape (cadr picture)
          #:value (make <mem> #:base (caddr picture) #:size (cadddr picture)))))
(define (write-image img file-name)
  (let [(format (if (eq? (typecode img) <ubyte>) 'I 'RGB))]
    (magick-write-image format (shape img) (get-memory (slot-ref img 'value)) file-name)
    img))
