(define-module (aiscm pulse)
  #:use-module (oop goops)
  #:use-module (aiscm element)
  #:use-module (aiscm int)
  #:use-module (aiscm mem)
  #:use-module (aiscm op)
  #:use-module (ice-9 optargs)
  #:use-module (aiscm util)
  #:export (<pulse> <meta<pulse>>
            rate channels
            write-samples latency drain
            check-audio-sample-type check-audio-sample-shape))
(load-extension "libguile-pulse" "init_pulse")
(define-class* <pulse> <object> <meta<pulse>> <class>
               (pulse    #:init-keyword #:pulse)
               (rate     #:init-keyword #:rate     #:getter rate)
               (channels #:init-keyword #:channels #:getter channels))
(define-method (initialize (self <pulse>) initargs)
  (let-keywords initargs #f (rate channels)
    (let [(rate     (or rate 44100))
          (channels (or channels 2))]
      (next-method self (list #:pulse (make-pulsedev rate channels)
                              #:rate rate
                              #:channels channels)))))
(define-method (destroy (self <pulse>)) (pulsedev-destroy (slot-ref self 'pulse)))
(define (check-audio-sample-type type)
  (if (not (eq? type <sint>))
      (aiscm-error 'write-samples "Audio samples need to consist of short integers (but was ~a)" type)))
(define (check-audio-sample-shape shape channels)
  (case (length shape)
    ((1) (if (not (eqv? 1 channels))
             (aiscm-error 'write-samples "One dimensional sample array only supported for one channel (not ~a)" channels)))
    ((2) (if (not (eqv? (car shape) channels))
             (aiscm-error 'write-samples "The samples should have ~a channels (but had ~a)" channels (car shape))))
    (else (aiscm-error 'write-samples "Audio sample array must not have more than 2 dimensions (but it had ~a)" (length shape)))))
(define (write-samples samples self)
  (check-audio-sample-type (typecode samples))
  (check-audio-sample-shape (shape samples) (channels self))
  (pulsedev-write (slot-ref self 'pulse)
                  (get-memory (slot-ref (ensure-default-strides samples) 'value))
                  (size-of samples))
  samples)
(define (latency self) (* 1e-6 (pulsedev-latency (slot-ref self 'pulse))))
(define (drain self) (pulsedev-drain (slot-ref self 'pulse)) self)
