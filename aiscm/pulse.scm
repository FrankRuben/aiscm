(define-module (aiscm pulse)
  #:use-module (oop goops)
  #:use-module (ice-9 optargs)
  #:use-module (aiscm mem)
  #:use-module (aiscm element)
  #:use-module (aiscm int)
  #:use-module (aiscm float)
  #:use-module (aiscm sequence)
  #:use-module (aiscm jit)
  #:use-module (aiscm util)
  #:export (<pulse-play> <meta<pulse-play>>
            PA_SAMPLE_U8 PA_SAMPLE_S16LE PA_SAMPLE_S32LE PA_SAMPLE_FLOAT32LE
            type->pulse-type pulse-type->type write-samples flush drain latency))
(load-extension "libguile-aiscm-pulse" "init_pulse")
(define-class* <pulse-play> <object> <meta<pulse-play>> <class>
               (pulsedev #:init-keyword #:pulsedev))
(define-method (initialize (self <pulse-play>) initargs)
  (let-keywords initargs #f (device type channels rate latency)
    (let* [(pulse-type (type->pulse-type (or type <sint>)))
           (playback   #t)
           (channels   (or channels 2))
           (rate       (or rate 44100))
           (latency    (or latency 0.02))
           (pulsedev   (make-pulsedev device pulse-type playback channels rate latency))]
    (next-method self (list #:pulsedev pulsedev)))))
(define typemap
  (list (cons <ubyte> PA_SAMPLE_U8)
        (cons <sint>  PA_SAMPLE_S16LE)
        (cons <int>   PA_SAMPLE_S32LE)
        (cons <float> PA_SAMPLE_FLOAT32LE)))
(define inverse-typemap (alist-invert typemap))
(define (type->pulse-type type)
  (or (assq-ref typemap type) (aiscm-error 'type->pulse-type "Type ~a not supported by Pulse audio" type)))
(define (pulse-type->type pulse-type)
  (assq-ref inverse-typemap pulse-type))
(define-method (destroy (self <pulse-play>))
  (pulsedev-destroy (slot-ref self 'pulsedev)))
(define-method (write-samples (samples <sequence<>>) (self <pulse-play>)); TODO: check type
  (pulsedev-write (slot-ref self 'pulsedev) (get-memory (value (ensure-default-strides samples))) (size-of samples)))
(define-method (write-samples (samples <procedure>) (self <pulse-play>))
  (let [(result (samples))]
    (while result
      (write-samples result self)
      (set! result (samples)))))
(define (flush self) (pulsedev-flush (slot-ref self 'pulsedev)))
(define (drain self) (pulsedev-drain (slot-ref self 'pulsedev)))
(define (latency self) (pulsedev-latency (slot-ref self 'pulsedev)))
