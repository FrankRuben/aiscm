(use-modules (oop goops)
             (aiscm complex)
             (aiscm element)
             (aiscm int)
             (aiscm float)
             (aiscm sequence)
             (guile-tap))
(planned-tests 18)
(define v (make (complex <byte>) #:value 2+3i))
(ok (eq? (complex <int>) (complex <int>))
    "equality of complex types")
(ok (eqv? 2 (size-of (complex <byte>)))
    "storage size of byte complex")
(ok (eqv? 8 (size-of (complex <float>)))
    "storage size of single-precision floating-point complex")
(ok (eq? <int> (base (complex <int>)))
    "base of integer complex type")
(ok (equal? #vu8(#x02 #x03) (pack v))
    "pack complex value")
(ok (equal? v (unpack (complex <byte>) #vu8(#x02 #x03)))
    "unpack complex value")
(ok (null? (shape v))
    "complex has no dimensions")
(ok (eq? (complex <byte>) (coerce (complex <byte>) <byte>))
    "coerce complex and scalar type")
(ok (eq? (complex <byte>) (coerce <byte> (complex <byte>)))
    "coerce scalar type and complex")
(ok (eq? (complex <sint>) (coerce (complex <byte>) (complex <usint>)))
    "coerce different complex types")
(ok (eq? (sequence (complex <int>)) (coerce (sequence <int>) (complex <int>)))
    "coerce integer sequence and complex type")
(ok (eq? (sequence (complex <int>)) (coerce (complex <int>) (sequence <int>)))
    "coerce complex type and integer sequence")
(ok (eq? (multiarray (complex <int>) 2) (coerce (complex <int>) (multiarray <int> 2)))
    "coerce complex type and 2D array")
(ok (equal? (list 2 3) (content 2+3i))
    "'content' extracts the components of a complex value")
(ok (eq? (complex <ubyte>) (match 2+3i))
    "type matching for 2+3i")
(ok (eq? (complex <double>) (match 2+3i 1.2))
    "type matching for complex value and scalar")
(ok (eq? (complex <double>) (match 1.2 2+3i))
    "type matching for scalar and complex value")
(ok (eq? (sequence <int>) (base (sequence (complex <int>))))
    "base type of sequence applies to element type")
