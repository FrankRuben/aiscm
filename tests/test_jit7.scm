(use-modules (oop goops)
             (aiscm asm)
             (aiscm jit)
             (aiscm element)
             (aiscm int)
             (aiscm sequence)
             (guile-tap))

(define ctx (make <context>))
(define i (var <long>))
(define j (var <long>))
(define s (seq <int> 2 3 5))
(define m (arr <int> (2 3 5) (7 11 13) (17 19 23)))
(define param2d (parameter (class-of m)))
(define transpose2d (indexer (car (shape param2d)) i (indexer (cadr (shape param2d)) j (get (get param2d j) i))))

(ok (equal? (to-list s) (to-list ((jit ctx (list (class-of s)) (lambda (s) (indexer (car (shape s)) i (get s i)))) s)))
    "reconstitute a 1D tensor in compiled code")
(ok (equal? (to-list m)
            (to-list ((jit ctx (list (class-of m))
              (lambda (m) (indexer (cadr (shape m)) j (indexer (car (shape m)) i (get (get m j) i))))) m)))
    "reconstitute a square 2D tensor")
(ok (equal? (list (dimension param2d) (dimension (project param2d)))
            (list (dimension (project transpose2d)) (dimension transpose2d)))
    "swap dimensions when transposing")
(ok (equal? (list (stride param2d) (stride (project param2d)))
            (list (stride (project transpose2d)) (stride transpose2d)))
    "swap strides when transposing")
(ok (equal? (list (step param2d) (step (project param2d)))
            (list (step (project transpose2d)) (step transpose2d)))
    "swap step variables when transposing")
(ok (equal? (list (iterator param2d) (iterator (project param2d)))
            (list (iterator (project transpose2d)) (iterator transpose2d)))
    "swap iterator variables when transposing")
(ok (equal? (to-list (roll m))
            (to-list ((jit ctx (list (class-of m))
              (lambda (m) (indexer (car (shape m)) i (indexer (cadr (shape m)) j (get (get m j) i))))) m)))
    "switch dimensions of a 2D tensor")
(run-tests)
