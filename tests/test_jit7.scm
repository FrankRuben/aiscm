(use-modules (oop goops)
             (aiscm asm)
             (aiscm jit)
             (aiscm element)
             (aiscm int)
             (aiscm sequence)
             (guile-tap))

(define ctx (make <context>))
(define i (var <long>))
(define j (var <long>))
(define s (seq <int> 2 3 5))
(define m (arr <int> (2 3 5) (7 11 13)))

(ok (equal? (to-list s) (to-list ((jit ctx (list (class-of s)) (lambda (s) (indexer (car (shape s)) i (get s i)))) s)))
    "reconstitute a 1D tensor in compiled code")
(skip (equal? (to-list m)
            (to-list ((jit ctx (list (class-of m))
              (lambda (m) (indexer (car (shape m)) i (indexer (cadr (shape m)) j (get (get m j) i))))) m)))
    "switch dimensions of 2D matrix by swapping tensor indices")
(run-tests)
