(use-modules (oop goops)
             (aiscm element)
             (aiscm int)
             (aiscm jit)
             (aiscm sequence)
             (aiscm op)
             (guile-tap))
(planned-tests 63)
(ok (equal? '(3 3 3) (multiarray->list (fill <byte> '(3) 3)))
    "fill byte sequence")
(ok (equal? '(3 3 3) (multiarray->list (fill <int> '(3) 3)))
    "fill integer sequence")
(ok (equal? '(-3 -3 -3) (multiarray->list (- (fill <int> '(3) 3))))
    "negate integer sequence")
(ok (equal? '(-3 -3 -3) (multiarray->list (- (fill <sint> '(3) 3))))
    "negate short integer sequence")
(ok (equal? '(-3 -3 -3) (multiarray->list (- (fill <byte> '(3) 3))))
    "negate byte sequence")
(ok (equal? '(-3 -3 -3) (multiarray->list (- (fill <long> '(3) 3))))
    "negate long integer sequence")
(ok (equal? '(1 -2 -3) (multiarray->list (- (list->multiarray '(-1 2 3)))))
    "negate sequence")
(ok (equal? '(4 4 4) (multiarray->list (+ (fill <int> '(3) 3) 1)))
    "add integer to integer sequence")
(ok (equal? '(2 2 2) (multiarray->list (+ (fill <int> '(3) 3) (- 1))))
    "add negative integer to integer sequence")
(ok (equal? '(257 257 257) (multiarray->list (+ (fill <byte> '(3) 1) 256)))
    "add integer to byte sequence")
(ok (equal? '(257 257 257) (multiarray->list (+ 256 (fill <byte> '(3) 1))))
    "add byte sequence to integer")
(ok (equal? '(4 4 4) (multiarray->list (+ 1 (fill <int> '(3) 3))))
    "add integer sequence to integer")
(ok (equal? '(4 4 4) (multiarray->list (+ (fill <int> '(3) 1) (fill <int> '(3) 3))))
    "add integer sequences")
(ok (equal? '(4 4 4) (multiarray->list (+ (fill <byte> '(3) 1) (fill <sint> '(3) 3))))
    "add byte and short integer sequences")
(ok (equal? '(4 4 4) (multiarray->list (+ (fill <sint> '(3) 1) (fill <byte> '(3) 3))))
    "add short integer and byte sequences")
(ok (equal? '(255 254 253) (multiarray->list (+ (list->multiarray '(-1 -2 -3)) 256)))
    "sign-expand negative values when adding byte sequence and short integer")
(ok (equal? '(255 254 253) (multiarray->list (+ 256 (list->multiarray '(-1 -2 -3)))))
    "sign-expand negative byte values when adding short integer and byte sequence")
(ok (equal? '(255) (multiarray->list (+ (list->multiarray '(-1)) (list->multiarray '(256)))))
    "sign-expand negative byte values when adding byte sequence and short integer sequence")
(ok (equal? '(255) (multiarray->list (+ (list->multiarray '(256)) (list->multiarray '(-1)))))
    "sign-expand negative byte values when adding short integer sequence and byte sequence")
(ok (equal? '(255) (multiarray->list (+ (list->multiarray '(256)) -1)))
    "sign-expand negative byte value when adding it to short integer sequence")
(ok (equal? '(255) (multiarray->list (+ -1 (list->multiarray '(256)))))
    "sign-expand negative value when short integer sequence is added to it")
(ok (equal? '(-257 -256 -255) (multiarray->list (- (list->multiarray '(-1 0 1)) 256)))
    "element-wise subtract 256 from an array")
(ok (equal? '(256 255 254) (multiarray->list (- 256 (list->multiarray '(0 1 2)))))
    "element-wise subtract array from 256")
(ok (equal? '(2 1 0) (multiarray->list (- (list->multiarray '(4 5 6)) (list->multiarray '(2 4 6)))))
    "subtract an array from another")
(ok (equal? '(2 4) (multiarray->list (+ (downsample 2 (list->multiarray '(1 2 3 4))) 1)))
    "add 1 to downsampled array")
(ok (equal? '(2 4) (multiarray->list (+ 1 (downsample 2 (list->multiarray '(1 2 3 4))))))
    "add downsampled array to 1")
(ok (equal? '(2 6) (let [(s (downsample 2 (list->multiarray '(1 2 3 4))))] (multiarray->list (+ s s))))
    "add two downsampled arrays")
(ok (equal? '((-1 2) (3 -4)) (multiarray->list (- (list->multiarray '((1 -2) (-3 4))))))
    "negate 2D array")
(ok (equal? '((0 1 2) (3 4 5)) (multiarray->list (- (list->multiarray '((1 2 3) (4 5 6))) 1)))
    "subtract 1 from a 2D array")
(ok (equal? '((6 5 4) (3 2 1)) (multiarray->list (- 7 (list->multiarray '((1 2 3) (4 5 6))))))
    "subtract 2D array from integer")
(ok (equal? '((1 1 2) (3 4 5)) (multiarray->list (- (list->multiarray '((2 3 5) (7 9 11)))
                                                    (list->multiarray '((1 2 3) (4 5 6))))))
    "subtract 2D array from each other")
(ok (equal? '(((-1 2 -3) (4 -5 6))) (multiarray->list (- (list->multiarray '(((1 -2 3) (-4 5 -6)))))))
    "negate 3D array")
(ok (equal? '(((2 3 4) (5 6 7))) (multiarray->list (+ (list->multiarray '(((1 2 3) (4 5 6)))) 1)))
    "add scalar to 3D array")
(ok (equal? '(((2 3 4) (5 6 7))) (multiarray->list (+ 1 (list->multiarray '(((1 2 3) (4 5 6)))))))
    "add 3D array to scalar")
(ok (equal? '(((2 4 6) (8 10 12))) (let [(m (list->multiarray '(((1 2 3) (4 5 6)))))]
                                     (multiarray->list (+ m m))))
    "add two 3D arrays")
(ok (equal? '((3 4 5) (7 8 9)) (multiarray->list (+ (list->multiarray '(0 1)) (list->multiarray '((3 4 5) (6 7 8))))))
    "add 1D and 2D array")
(ok (equal? '((3 4 5) (7 8 9)) (multiarray->list (+ (list->multiarray '((3 4 5) (6 7 8))) (list->multiarray '(0 1)))))
    "add 2D and 1D array")
(ok (equal?  '((((2 2) (2 2)) ((2 2) (2 2))) (((2 2) (2 2)) ((2 2) (2 2))))
             (multiarray->list (+ 1 (fill <int> '(2 2 2 2) 1))))
    "add 1 to 4D array")
(ok (equal? '((2 4) (6 8)) (multiarray->list (* 2 (list->multiarray '((1 2) (3 4))))))
    "scalar-array multiplication")
(ok (equal? '((256 256) (256 256)) (multiarray->list (* 256 (list->multiarray '((1 1) (1 1))))))
    "correct handling of strides with 2D short integer array")
(ok (equal? '(1 4) (multiarray->list (duplicate (project (roll (list->multiarray '((1 2 3) (4 5 6))))))))
    "'duplicate' creates copy of slice")
(ok (equal? '((1 3) (2 4)) (multiarray->list (duplicate (roll (list->multiarray '((1 2) (3 4)))))))
    "'duplicate' creates copy of 2D array")
(ok (equal? '(1 2) (strides (duplicate (roll (list->multiarray '((1 2) (3 4)))))))
    "'duplicate' creates a compact copy of the array")
(ok (equal? '(-2 3 5) (multiarray->list (to-type (list->multiarray '(-2 3 5)) <byte>)))
    "trivial type conversion")
(ok (eq? <int> (typecode (to-type (sequence <byte>) <int>)))
    "cast element-type to integer")
(ok (eq? <int> (typecode (to-type (list->multiarray '(2 3 5)) <int>)))
    "element-wise type conversion converts to target type")
(ok (equal? '(2 3 5) (multiarray->list (to-type (list->multiarray '(2 3 5)) <uint>)))
    "element-wise conversion preserves values when increasing integer size")
(ok (equal? '(-2 3 5) (multiarray->list (to-type (list->multiarray '(-2 3 5)) <int>)))
    "element-wise conversion preserves sign when increasing integer size")
(ok (equal? '(254 3 5) (multiarray->list (to-type (list->multiarray '(-2 3 5)) <ubyte>)))
    "typecasting to corresponding signed integer type")
(ok (equal? '(255 0 1) (multiarray->list (to-type (list->multiarray '(255 256 257)) <ubyte>)))
    "typecasting to smaller integer type")
(ok (equal? '(253 252 250) (multiarray->list (~ (list->multiarray '(2 3 5)))))
    "bitwise negation of array")
(ok (equal? '(#f #t #f) (multiarray->list (=0 (list->multiarray '(-1 0 1)))))
    "compare bytes with zero")
(ok (equal? '(#f #t #f) (multiarray->list (=0 (to-type (list->multiarray '(-1 0 1)) <int>))))
    "compare integers with zero")
(ok (equal? '(#t #f #t) (multiarray->list (!=0 (list->multiarray '(-1 0 1)))))
    "check whether bytes are not zero")
(ok (equal? '(#f #t #f) (multiarray->list (! (list->multiarray '(#t #f #t)))))
    "element-wise not for booleans")
(ok (equal? '(#f #t) (multiarray->list (= (list->multiarray '(3 4)) (list->multiarray '(5 4)))))
    "element-wise array-array comparison")
(ok (equal? '(#f #t) (multiarray->list (= 4 (list->multiarray '(5 4)))))
    "element-wise scalar-array comparison")
(ok (equal? '(#f #t #f) (multiarray->list (= (list->multiarray '(3 4 5)) 4)))
    "element-wise array-scalar comparison")
(ok (equal? '(#t #f #t) (multiarray->list (!= (list->multiarray '(3 4 5)) 4)))
    "element-wise not-equal")
(ok (equal? '(#t #f #f) (multiarray->list (< (list->multiarray '(3 4 5)) 4)))
    "element-wise lower-than")
(ok (equal? '(#t #t #f) (multiarray->list (<= (list->multiarray '(3 4 5)) 4)))
    "element-wise lower-equal")
(ok (equal? '(#f #f #t) (multiarray->list (> (list->multiarray '(3 4 5)) 4)))
    "element-wise greater-than")
(ok (equal? '(#f #t #t) (multiarray->list (>= (list->multiarray '(3 4 5)) 4)))
    "element-wise greater-equal")
