(use-modules (aiscm obj)
             (aiscm element)
             (aiscm int)
             (aiscm bool)
             (aiscm sequence)
             (aiscm jit)
             (aiscm asm)
             (oop goops)
             (system foreign)
             (guile-tap))
(define obj (make <obj> #:value 'sym))
(define address (pointer-address (scm->pointer 'sym)))
(define ctx (make <context>))

(ok (eqv? 8 (size-of <obj>))
    "size of SCM reference is 64 bits")
(ok (equal? #vu8(#xaa #x00 #x00 #x00 #x00 #x00 #x00 #x00) (pack (make <obj> #:value 42)))
    "pack Scheme object")
(ok (equal? (make <obj> #:value 42) (unpack <obj> #vu8(#xaa #x00 #x00 #x00 #x00 #x00 #x00 #x00)))
    "unpack Scheme object")
(ok (eq? <obj> (coerce <obj> <obj>))
    "objects coerce to objects")
(ok (eq? <obj> (coerce <obj> <int>))
    "object and integer coerce to object")
(ok (eq? <obj> (coerce <int> <obj>))
    "integer and object coerce to object")
(ok (equal? "#<<obj> abc>"
            (call-with-output-string (lambda (port) (write (make <obj> #:value 'abc) port))))
    "write wrapped object")
(ok (eq? <obj> (native-type 'a))
    "native type for a symbol is <obj>")
(ok (equal? (make <obj> #:value 'sym) (build <obj> address))
    "build SCM value")
(ok (equal? (list address) (content <obj> 'sym))
    "content of symbol returns internal 64 bit representation")
(ok (eq? -300 ((jit ctx (list <obj>) (lambda (x) (call <obj> obj-negate x))) 300))
    "compile and run call to scm_difference with one argument")
(ok (eq? -124 ((jit ctx (list <obj>) (lambda (x) (call <obj> scm-lognot x))) 123))
    "compile and run bitwise not")
(ok (equal? '(#f #t) (map (jit ctx (list <obj>) (lambda (x) (call <bool> obj-zero-p x))) '(3 0)))
    "compile and run comparison with zero")
(ok (equal? '(#t #f) (map (jit ctx (list <obj>) (lambda (x) (call <bool> obj-nonzero-p x))) '(3 0)))
    "compile and run not-equal-to zero")
(ok (equal? '(#t #f #f #f #f) (map (jit ctx (list <obj>) (lambda (x) (call <bool> obj-not x))) '(#f #t () 0 1)))
    "compile logical not for Scheme objects")
(ok (eq? 300 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-sum x y))) 100 200))
    "compile and run call to scm_sum")
(ok (eq? 100 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-difference x y))) 300 200))
    "compile and run call to scm_difference")
(ok (eq? 600 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-product x y))) 20 30))
    "compile and run call to scm_product")
(ok (eq? 30 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-divide x y))) 600 20))
    "compile and run call to scm_divide")
(ok (eq? 33 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-remainder x y))) 123 45))
    "compile and run call to scm_remainder")
(ok (eq? 72 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-logand x y))) 123 456))
    "compile and run call to scm_logand")
(ok (eq? 507 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-logior x y))) 123 456))
    "compile and run call to scm_logior")
(ok (eq? 435 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-logxor x y))) 123 456))
    "compile and run call to scm_logxor")
(ok (equal? '(#f b) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> obj-and x y))) '(#f a) '(b b)))
    "compile logical and for Scheme objects")
(ok (equal? '(b a) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> obj-or x y))) '(#f a) '(b b)))
    "compile logical or for Scheme objects")
(ok (eq? 123 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-min x y))) 123 456))
    "compile and run call to scm_min")
(ok (eq? 456 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-max x y))) 123 456))
    "compile and run call to scm_max")
(ok (eq? 1968 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> scm-ash x y))) 123 4))
    "compile and run call to scm_ash")
(ok (eq? 123 ((jit ctx (list <obj> <obj>) (lambda (x y) (call <obj> obj-shr x y))) 1968 4))
    "compile and run call to obj_shr")
(ok (equal? '(#f #t) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-equal-p x y))) '(21 42) '(42 42)))
    "compile and run equality of objects")
(ok (equal? '(#t #f) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-nequal-p x y))) '(21 42) '(42 42)))
    "compile and run inequality of objects")
(ok (equal? '(#t #f #f) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-less-p x y))) '(3 5 7) '(5 5 5)))
    "compile and run lower-than comparison for objects")
(ok (equal? '(#t #t #f) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-leq-p x y))) '(3 5 7) '(5 5 5)))
    "compile and run lower-equal comparison for objects")
(ok (equal? '(#f #f #t) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-gr-p x y))) '(3 5 7) '(5 5 5)))
    "compile and run greater-than comparison for objects")
(ok (equal? '(#f #t #t) (map (jit ctx (list <obj> <obj>) (lambda (x y) (call <bool> obj-geq-p x y))) '(3 5 7) '(5 5 5)))
    "compile and run greater-equal comparison for objects")
(ok (not (pointerless? <obj>))
    "object memory is not pointerless")
(ok (equal? '(#f #f #f) (to-list (make (sequence <obj>) #:size 3)))
    "sequence of objects is filled with boolean false")
(run-tests)
