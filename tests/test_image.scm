(use-modules (oop goops)
             (rnrs bytevectors)
             (system foreign)
             (aiscm element)
             (aiscm sequence)
             (aiscm image)
             (guile-tap))
(define data (bytevector->pointer #vu8(2 3 5 7 11 13 17 19)))
(define img (make <image> #:format 'GRAY #:shape '(8 1) #:data data))
(planned-tests 8)
(ok (equal? #vu8(2 2 2 255 3 3 3 255) (pointer->bytevector (get-data (convert img 'BGRA)) 8))
  "conversion to BGRA")
(ok (equal? '(16 2) (shape (convert img 'BGRA '(16 2))))
  "shape of scaled image")
(ok (eqv? (get-data img) (get-data (convert img 'GRAY)))
  "do nothing if converting to identical format")
(ok (equal? #vu8(2 3 5 7 11 13 17 19 2 3 5 7 11 13 17 19)
            (pointer->bytevector (get-data (convert img 'GRAY '(8 2))) 16))
  "values of image with scaled height")
(ok (equal? 2 (bytevector-u8-ref (pointer->bytevector (get-data (convert img 'GRAY '(8 2) '(0) '(16))) 32) 16))
  "correct application of custom pitches")
(ok (equal? '((2 3 5 7 11 13 17 19)) (multiarray->list (image->multiarray img)))
  "'image->multiarray' should convert the image to a 2D array")
(ok (equal? '((2 3 5 7 11 13 17 19)) (multiarray->list (image->multiarray (convert img 'UYVY))))
  "'image->multiarray' should convert the image to grayscale")
(ok (equal? '(2 2) (multiarray->list (project (roll (image->multiarray (convert img 'GRAY '(8  2) '(0) '(16)))))))
  "'image->multiarray' should take pitches (strides) into account")
