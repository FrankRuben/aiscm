(use-modules (oop goops)
             (rnrs bytevectors)
             (system foreign)
             (aiscm element)
             (aiscm sequence)
             (aiscm image)
             (guile-tap))
(define data1 (bytevector->pointer #vu8(2 3 5 7 11 13 17 19)))
(define img1 (make <image> #:format 'GRAY #:width 8 #:height 1 #:data data1))
(planned-tests 9)
(ok (equal? #vu8(2 2 2 255 3 3 3 255) (pointer->bytevector (get-data (convert img1 'BGRA)) 8))
  "conversion to BGRA")
(ok (eqv? 16 (get-width (convert img1 'BGRA 16 2)))
  "width of scaled image")
(ok (eqv? 2 (get-height (convert img1 'BGRA 16 2)))
  "height of scaled image")
(ok (eqv? (get-data img1) (get-data (convert img1 'GRAY)))
  "do nothing if converting to identical format")
(ok (equal? #vu8(2 3 5 7 11 13 17 19 2 3 5 7 11 13 17 19)
            (pointer->bytevector (get-data (convert img1 'GRAY 8 2)) 16))
  "values of image with scaled height")
(ok (equal? 2
            (bytevector-u8-ref (pointer->bytevector (get-data (convert img1 'GRAY 8 2 '(0) '(10))) 20) 10))
  "correct application of custom pitches")
(ok (equal? '(8 1) (shape img1))
  "'shape' should return the width and height of the image")
(ok (equal? '((2 3 5 7 11 13 17 19)) (multiarray->list (image->multiarray img1)))
  "'image->multiarray' should convert the image to a 2D array")
(ok (equal? '((2 3 5 7 11 13 17 19)) (multiarray->list (image->multiarray (convert img1 'UYVY))))
  "'image->multiarray' should convert the image to grayscale")
