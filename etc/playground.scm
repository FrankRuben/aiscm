(use-modules (oop goops)
             (srfi srfi-1)
             (srfi srfi-26)
             (system foreign)
             (aiscm element)
             (aiscm int)
             (aiscm sequence)
             (aiscm mem)
             (aiscm pointer)
             (aiscm rgb)
             (aiscm complex)
             (aiscm obj)
             (aiscm asm)
             (aiscm jit)
             (aiscm method)
             (aiscm util)
             (guile-tap))

(define (temporary-variables prog)
  "Allocate temporary variable for each instruction which has a variable as first argument"
  (map (lambda (cmd) (let [(arg (first-argument cmd))]
    (or (and (not (null? (get-ptr-args cmd))) (var <long>)) (and (is-a? arg <var>) (var (typecode arg)))))) prog))

(define a (var <int>))
(define x (var <sint>))
(define p (var <long>))

(ok (null? (temporary-variables '()))
    "an empty program needs no temporary variables")
(ok (equal? (list <var>) (map class-of (temporary-variables (list (MOV a 0)))))
    "create temporary variable for first argument of instruction")
(ok (not (equal? (list a) (temporary-variables (list (MOV a 0)))))
    "temporary variable should be distinct from first argument of instruction")
(ok (equal? (list <sint>) (map typecode (temporary-variables (list (MOV x 0)))))
    "temporary variable should have correct type")
(ok (equal? (list #f) (temporary-variables (list (MOV EAX 0))))
    "it should not create a temporary variable if the statement does not contain variables")
(ok (equal? (list #f) (temporary-variables (list (MOV EAX a))))
    "it should not create a temporary variable if the first argument is not a variable")
(ok (equal? (list <var>) (map class-of (temporary-variables (list (MOV (ptr <int> p) a)))))
    "create temporary variable for pointer argument to instruction")
(ok (equal? (list <long>) (map typecode (temporary-variables (list (MOV (ptr <int> p) a)))))
    "temporary variable for pointer argument needs to be long integer")

(temporary-variables (list (MOV (ptr <int> (var <long>)) (var <int>))))
(map typecode (temporary-variables (list (MOV (var <int>) (ptr <int> (var <long>))))))

; (mov-unsigned R13 (ptr <obj> (ptr <long> RSP 80) 8))
; (mov-unsigned (ptr <obj> (ptr <long> RSP 72) 8) R13)

; (replace-variables (list (cons a R13) (cons p (ptr <long> RSP 80))) (mov-unsigned a (ptr <int> p 8)) RAX)


(define ctx (make <context>))

(define context ctx)
(define classes (list (sequence (rgb <int>))))
(define proc (cut to-type (rgb <obj>) <>))

;(jit context classes proc)

(define vars         (map skeleton classes))
(define expr         (apply proc (map parameter vars)))
(define result-type  (type expr))
(define result       (parameter result-type))
(define types        (map class-of vars))
(define intermediate (generate-return-code vars result expr))
(define lst (apply assemble intermediate))
(define results (car lst))
(define parameters (cadr lst))
(define instructions (caddr lst))
(define registers default-registers)
(define prog (flatten-code (relabel (filter-blocks instructions))))
(define blocked (blocked-intervals instructions))

(define live                 (live-analysis prog results))
(define temp-vars            (temporary-variables prog))
(define intervals            (append (live-intervals live (variables prog))
                                     (unit-intervals temp-vars)))
(define predefined-registers (register-parameter-locations (register-parameters parameters)))
(define parameters-to-move   (blocked-predefined predefined-registers intervals blocked))
(define remaining-predefines (non-blocked-predefined predefined-registers parameters-to-move))
(define stack-parameters     (stack-parameters parameters))
(define colors               (linear-scan-coloring intervals registers remaining-predefines blocked))
(define callee-saved         (used-callee-saved colors))
(define stack-offset         (* 8 (1+ (number-spilled-variables colors stack-parameters))))
(define parameter-offset     (+ stack-offset (* 8 (length callee-saved))))
(define stack-locations      (stack-parameter-locations stack-parameters parameter-offset))
(define allocation           (add-stack-parameter-information colors stack-locations))
(define temporaries          (temporary-registers allocation temp-vars))
(define locations            (add-spill-information allocation 8 8))

;(append-map (cut replace-variables locations <...>) prog temporaries)

(run-tests)
