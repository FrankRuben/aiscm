(use-modules (oop goops)
             (srfi srfi-1)
             (srfi srfi-26)
             (system foreign)
             (aiscm element)
             (aiscm int)
             (aiscm sequence)
             (aiscm mem)
             (aiscm pointer)
             (aiscm rgb)
             (aiscm complex)
             (aiscm obj)
             (aiscm asm)
             (aiscm jit)
             (aiscm method)
             (aiscm util)
             (guile-tap))

; (mov-unsigned R13 (ptr <obj> (ptr <long> RSP 80) 8))
; (mov-unsigned (ptr <obj> (ptr <long> RSP 72) 8) R13)

; (replace-variables (list (cons a R13) (cons p (ptr <long> RSP 80))) (mov-unsigned a (ptr <int> p 8)) RAX)

;(diagnostics "starting test")
;(ok (equal? (list (rgb 3 4 6)) (to-list (+ (seq (rgb <obj>) (rgb 2 3 5)) 1)))
;    "convert integer RGB sequence to object RGB sequence")
;(diagnostics "test finished")
;
;(define ctx (make <context>))
;
;(define context ctx)
;(define classes (list (sequence (rgb <obj>)) (rgb <int>)))
;(define proc +)
;
;(jit context classes proc)
;
;(define vars         (map skeleton classes))
;(define expr         (apply proc (map parameter vars)))
;(define result-type  (type expr))
;(define result       (parameter result-type))
;(define types        (map class-of vars))
;(define intermediate (generate-return-code vars result expr))
;(define lst (apply assemble intermediate))
;(define results (car lst))
;(define parameters (cadr lst))
;(define instructions (caddr lst))
;(define registers default-registers)
;(define prog (flatten-code (relabel (filter-blocks instructions))))
;(define blocked (blocked-intervals instructions))
;
;(define live                 (live-analysis prog results))
;(define temporary-variables  (temporary-variables prog))
;(define intervals            (append (live-intervals live (variables prog))
;                                     (unit-intervals temporary-variables)))
;(define predefined-registers (register-parameter-locations (register-parameters parameters)))
;(define parameters-to-move   (blocked-predefined predefined-registers intervals blocked))
;(define remaining-predefines (non-blocked-predefined predefined-registers parameters-to-move))
;(define stack-parameters     (stack-parameters parameters))
;(define colors               (linear-scan-coloring intervals registers remaining-predefines blocked))
;(define callee-saved         (used-callee-saved colors))
;(define stack-offset         (* 8 (1+ (number-spilled-variables colors stack-parameters))))
;(define parameter-offset     (+ stack-offset (* 8 (length callee-saved))))
;(define stack-locations      (stack-parameter-locations stack-parameters parameter-offset))
;(define allocation           (add-stack-parameter-information colors stack-locations))
;(define temporaries          (temporary-registers allocation temporary-variables))
;(define locations            (add-spill-information allocation 8 8))
;
;(define a (var <long>))
;(define p (ptr <int> a 16))
;
;(replace-variables (list (cons a (ptr <long> RSP 32))) (MOV p 42) RAX)

(run-tests)
