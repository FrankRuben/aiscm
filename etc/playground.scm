(use-modules (srfi srfi-64))
(use-modules (srfi srfi-26))
(use-modules (srfi srfi-1))
(use-modules (oop goops) (aiscm asm) (aiscm jit) (aiscm element) (aiscm int) (aiscm sequence) (aiscm pointer) (aiscm expression) (aiscm operation) (aiscm util) (aiscm program) (aiscm register-allocate) (aiscm compile) (aiscm live-analysis) (aiscm variable) (aiscm command) (aiscm bool))

(to-type <byte> (seq <int> 2 3 5))

(define ctx (make <context>))
(define target <byte>)
(define self (seq <int> 2 3 5))
;(jit ctx (list (class-of self)) (cut to-type target <>))

(define context ctx)
(define classes (list (class-of self)))
(define proc (cut to-type target <>))
(define args         (map skeleton classes))
(define parameters   (map parameter args))
(define expr         (apply proc parameters))
(define result-type  (type expr))
(define intermediate (parameter result-type))
(define result       (generate-return-code args intermediate expr))
(define lst          (apply assemble result))
(define results      (list-ref lst 0))
(define parameters   (list-ref lst 1))
(define instructions (list-ref lst 2))
(define registers    default-registers)
(define blocked (blocked-intervals instructions))
(define prog(flatten-code (relabel (filter-blocks instructions))))

(define live                 (live-analysis prog results))
(define temp-vars            (map temporary-variables prog))
(define intervals            (append (live-intervals live (variables prog))
                             (unit-intervals temp-vars)))
(define predefined-registers (register-parameter-locations (register-parameters parameters)))
(define parameters-to-move   (blocked-predefined predefined-registers intervals blocked))
(define remaining-predefines (non-blocked-predefined predefined-registers parameters-to-move))
(define stack-parameters     (stack-parameters parameters))
(define colors               (linear-scan-coloring intervals registers remaining-predefines blocked))
(define callee-saved         (used-callee-saved colors))
(define stack-offset         (* 8 (1+ (number-spilled-variables colors stack-parameters))))
(define parameter-offset     (+ stack-offset (* 8 (length callee-saved))))
(define stack-locations      (stack-parameter-locations stack-parameters parameter-offset))
(define allocation           (add-stack-parameter-information colors stack-locations))
(define temporaries          (map (temporary-registers allocation) temp-vars))
(define locations            (add-spill-information allocation 8 8))
;(append-map (cut replace-variables locations <...>) prog temporaries)

;((lambda (x) (replace-variables locations (list-ref prog x) (list-ref temporaries x))) 18)
(define allocation locations)
(define cmd (list-ref prog 18))
(define temporaries (list-ref temporaries 18))
(define substituted (substitute-variables cmd allocation))
(define spilled? (lambda (var) (is-a? (assq-ref allocation var) <address>)))

(test-begin "playground")
(test-end "playground")
